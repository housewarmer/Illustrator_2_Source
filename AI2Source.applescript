global jsCompositeCodeglobal myListset myList to {}global loopFirstRunglobal containerClasstell application "Adobe Illustrator"	#environment variables	set doc to current document	set pathObjectCount to count path items of doc	set compoundPathCount to count compound path items of doc	set loopFirstRun to true	set containerClass to {}	set containerClassList to {}		#artboard setup	set canvas to artboard 1 of doc	set canvasbounds to artboard rectangle of canvas		set canvasWidth to (item 3 of canvasbounds) - (item 1 of canvasbounds)	if canvasWidth < 0 then set canvasWidth to -canvasWidth		set canvasHeight to (item 4 of canvasbounds) - (item 2 of canvasbounds)	if canvasHeight < 0 then set canvasHeight to -canvasHeight		set ruler origin of doc to {0, 0}			#code creation	set jsCompositeCode to ""	#path drawing subroutines	repeat with pathObjectIndex from pathObjectCount to 1 by -1		set selectedPath to path item pathObjectIndex of doc		#call pathDraw handler		if class of container of selectedPath is compound path item then			set containerContents to path items of container of selectedPath			repeat with containerContents in container of selectedPath				my pathDraw(selectedPath)			end repeat			if index of selectedPath is 1 then				my pathStyle(selectedPath)			end if		else			my pathDraw(selectedPath)		end if		set containerClass to container of selectedPath	end repeat	#final code composition	set jsOutput to jsCompositeCodeend tell#set the clipboard to jsOutputset the clipboard to jsOutputcontainerClassList#path point extractionon pathDraw(selectedPath)	set dr to return & return	set t1 to tab	set t2 to tab & tab	set t3 to tab & tab & tab		tell application "Adobe Illustrator"		set selectedPathPoints to entire path of selectedPath		set pathClosed to closed of selectedPath		set pointCount to count items of selectedPathPoints										set jsDrawCode to "" & return		repeat with pointIndex from 1 to pointCount			set anchorPoint to "var ap = new Point(" & my roundThis(item 1 of anchor of item pointIndex of selectedPathPoints, 2) & ", " & my roundThis(item 2 of anchor of item pointIndex of selectedPathPoints, 2) & ");" as string			set directionPointLeft to "var dpL = new Point(" & my roundThis(item 1 of left direction of item (pointIndex) of selectedPathPoints, 2) & ", " & my roundThis(item 2 of left direction of item (pointIndex) of selectedPathPoints, 2) & ");" as string			set directionPointRight to "var dpR = new Point(" & my roundThis(item 1 of right direction of item pointIndex of selectedPathPoints, 2) & ", " & my roundThis(item 2 of right direction of item pointIndex of selectedPathPoints, 2) & ");" as string												set jsDrawMethod to t1 & anchorPoint & return & t1 & directionPointLeft & return & t1 & directionPointRight & t1 & return & t1 & "var cp = new ControlPoint(ap, dpL, dpR);" & t1 & return & t1 & "controlPoints.push(cp);" & return & "var aPathObject = new PathObject(controlPoints)" & dr						set jsDrawCode to jsDrawCode & jsDrawMethod					end repeat		set jsDrawCode to jsDrawCode & "}" & dr	end tell	set jsCompositeCode to jsCompositeCode & jsDrawCodeend pathDraw#rounding handleron roundThis(aNumber, numDecimals)	set correctionFactor to 10 ^ numDecimals	(((aNumber * correctionFactor) + 0.5) div 1) / correctionFactorend roundThis